swagger: '2.0'
info:
  title: API Title
  version: '1.0'
tags:
  - name: Auth
    description: Authorization
  - name: User
    description: User Information
  - name: Lesson
    description: Lesson Information
paths:
  # AUTH 관련 API
  /auth/login:
    post:
      tags:
        - Auth
      summary: Login
      description: 응답 body에는 accessToken을 cookie에는 refreshToken을 전달합니다.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Login'
      responses:
        '200':
          description: 'Login success'
          schema:
            type: object
            properties:
              message:
                type: string
                example: 'request success'
              data:
                type: string
          headers:
            cookie:
              description: JWT refreshToken
              type: string
        '401':
          description: 'Unauthorized'
          schema:
            type: string
            example: 입력하신 id에 해당하는 계정이 없습니다. or 잘못된 비밀번호 입니다.

  /auth/logout:
    get:
      tags:
        - Auth
      summary: Logout
      produces:
        - application/json
      parameters:
        - in: header
          name: refreshToken
          type: string
      responses:
        '200':
          description: logout success
          schema:
            type: object
            properties:
              message:
                type: string
                example: 'logout complete'
              data:
                type: object

  /auth/signup:
    post:
      tags:
        - Auth
      summary: Signup User
      description: 'Model에서 required 요소만 req.body에 담아 전달합니다. email과 phone_number는 둘 중 하나는 반드시 포함되어야 합니다.'
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            properties:
              login_id:
                type: string
              login_password:
                type: string
              type:
                type: string
                enum:
                  - Student
                  - Tutor
              birth:
                type: string
              gender:
                type: string
                enum:
                  - Male
                  - Female
                  - Other
              name:
                type: string
              nickname:
                type: string
              email:
                type: string
              phone_number:
                type: string

      responses:
        '201':
          description: Created User
          schema:
            type: object
            properties:
              message:
                type: string
                example: 'request success'
              data:
                $ref: '#/definitions/User'
        '500':
          description: Internal Server Error
          schema:
            type: string
            example: '서버에서 오류가 발생했습니다. 잠시 후 다시 시도해주세요.'

  /auth/signup/user:
    get:
      tags:
        - Auth
      summary: Check if userInfo is valid
      description: '중복 체크 하고 싶은 요소를 쿼리로 전달합니다. login_id와 email을 동시에 query로 전달할 수 없습니다.'
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: query
          type: string
          name: login_id
        - in: query
          type: string
          name: email
        - in: query
          type: string
          name: nickname
      responses:
        '200':
          description: OK
          schema:
            type: object
            properties:
              message:
                type: string
                example: '사용할 수 있는 유저 정보 입니다.'
              data:
                type: object
        '400':
          description: Bad_Request
          schema:
            type: string
            example: '이미 존재하는 유저 정보 입니다.'

  /auth/refresh:
    get:
      tags:
        - Auth
      summary: Refresh accessToken
      parameters:
        - in: header
          type: string
          name: refreshToken(cookie)
      responses:
        '200':
          description: 'Login success'
          schema:
            type: object
            properties:
              message:
                type: string
                example: 'request success'
              data:
                type: string
        '400':
          description: 'Bad_Request'
          schema:
            type: string
            example: '해당하는 계정 정보가 없습니다. or refresh token이 존재하지 않습니다.'

        '401':
          description: 'Unauthorized'
          schema:
            type: string
            example: 'JWT expired'

  # USER 관련 API
  /user/profile/{id}:
    get:
      tags:
        - User
      summary: Get user profile by ID
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: 'id'
          type: number
          in: path
          required: true
          description: user ID
      responses:
        '200':
          description: Succesfully got User profile
          schema:
            type: object
            properties:
              message:
                type: string
                example: 'Success'
              data:
                $ref: '#/definitions/User'
        '400':
          description: Invalid ID
          schema:
            type: object
            properties:
              message:
                type: string
                example: 'Failed'

  /user:
    patch:
      tags:
        - User
      summary: Edit my profile
      parameters:
        - in: header
          type: string
          name: accessToken
          required: true
          description: user accessToken
        - name: body
          in: body
          description: Edit contents
          schema:
            type: object
            properties:
              type:
                enum: ['Student', 'Tutor']
              nickname:
                type: string
              name_public:
                type: boolean
              phone_public:
                type: boolean
              image_url:
                type: string
              introduction:
                type: string
      responses:
        '200':
          description: SUCCESS
          schema:
            type: object
            properties:
              message:
                type: string
                example: 'Success'
              data:
                $ref: '#/definitions/User'
        '401':
          description: Unauthorized
          schema:
            type: object
            properties:
              message:
                type: string

    get:
      tags:
        - User
      summary: Get All user profile
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: header
          type: string
          name: accessToken
          required: true
          description: user accessToken
      responses:
        '200':
          description: Succesfully got All user profile
          schema:
            type: object
            properties:
              message:
                type: string
                example: 'Success'
              data:
                $ref: '#/definitions/User'
        '401':
          description: Unauthorized
          schema:
            type: object
            properties:
              message:
                type: string
                example: 'Failed'

  /user/logged:
    get:
      tags:
        - User
      summary: Get My profile
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: header
          type: string
          name: accessToken
          required: true
          description: user accessToken
      responses:
        '200':
          description: Succesfully got My profile
          schema:
            type: object
            properties:
              message:
                type: string
                example: 'Success'
              data:
                $ref: '#/definitions/User'
        '401':
          description: Unauthorized
          schema:
            type: object
            properties:
              message:
                type: string
                example: 'Failed'
  #Lesson 관련 API
  /lesson/{id}:
    get:
      tags:
        - Lesson
      summary: 'Get existing lesson by lesson id'
      description: ''
      operationId: getLesson
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: 'id'
          in: path
          description: 'lesson id'
          type: integer
          format: int32
          required: true
      responses:
        '200':
          description: 'Successful: a lesson is returned'
          schema:
            required:
              - message
              - data
            properties:
              message:
                type: string
                example: a lesson is successfully retrived
              data:
                $ref: '#/definitions/Lesson'
        '400':
          description: 'Bad Request: id is missing or not a number'
          schema:
            required:
              - message
              - data
            properties:
              message:
                type: string
                example: 'id is missing or not a number'
              data:
                type: object
        '409':
          description: "Conflict: id is number but there's no corresponding data"
          schema:
            required:
              - message
              - data
            properties:
              message:
                type: string
                example: 'no such lesson'
              data:
                type: object
    patch:
      tags:
        - Lesson
      summary: 'Edit some fields of a lesson'
      description: ''
      operationId: editLesson
      parameters:
        - name: 'id'
          in: path
          description: 'lesson id'
          type: integer
          format: int32
          required: true
        - name: 'body'
          in: body
          description: 'lesson fields to update lesson information'
          schema:
            $ref: '#/definitions/LessonEditable'
          required: true
      responses:
        '200':
          description: a lesson is successfully edited
          schema:
            required:
              - message
              - data
            properties:
              message:
                type: string
                example: a lesson is successfully edited
              data:
                $ref: '#/definitions/Lesson'
        '400':
          description: 'Bad Request: id is missing or not a number, or the request body is invalid'
          schema:
            required:
              - message
              - data
            properties:
              message:
                type: string
                example: 'wrong request of parameter or payload'
              data:
                type: object
        '403':
          description: 'Forbidden: The client is not accessable for editing'
          schema:
            required:
              - message
              - data
            properties:
              message:
                type: string
                example: 'The request agent has no permission to edit'
              data:
                type: object
    delete:
      tags:
        - Lesson
      summary: 'Delete an existing lesson ad'
      description: ''
      operationId: deleteLesson
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: 'id'
          in: path
          description: 'lesson id'
          type: integer
          format: int32
          required: true
      responses:
        '200':
          description: 'Succesful: a lesson is successfully deleted'
          schema:
            required:
              - message
              - data
            properties:
              message:
                type: string
                example: 'a lesson is successfully deleted'
              data:
                type: object
        '400':
          description: 'Bad Request: id is missing or not a number, or the request body is invalid'
          schema:
            required:
              - message
              - data
            properties:
              message:
                type: string
                example: 'wrong request of parameter or payload'
              data:
                type: object
        '403':
          description: 'Forbidden: The client is not accessable for deleting'
          schema:
            required:
              - message
              - data
            properties:
              message:
                type: string
                example: 'The request agent has no permission to delete'
              data:
                type: object
  /lesson/:
    post:
      tags:
        - Lesson
      summary: 'Add new lesson ad'
      description: ''
      operationId: submitLesson
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: 'body'
          in: body
          description: 'lesson information for submission'
          schema:
            $ref: '#/definitions/LessonEditable'
          required: true
      responses:
        '201':
          description: 'Created: added a lesson successfully to database'
          schema:
            required:
              - message
              - data
            properties:
              message:
                type: string
                example: 'The lesson is succesfully submitted'
              data:
                description: 'The lesson information just added'
                $ref: '#/definitions/Lesson'
        '400':
          description: 'Bad Request: when some fields are invalid or the request is invalid'
          schema:
            properties:
              message:
                type: string
                example: 'Some fields are invalid'
              data:
                type: object
                example:
definitions:
  Login:
    type: object
    required:
      - 'login_id'
      - 'login_password'
    properties:
      login_id:
        type: string
      login_password:
        type: string
  User:
    type: object
    required:
      - 'login_id'
      - 'login_password'
      - 'type'
      - 'name'
      - 'birth'
      - 'gender'
      - 'nickname'
    properties:
      login_id:
        type: string
      login_password:
        type: string
      type:
        enum:
          - 'student'
          - 'tutor'
      name:
        type: string
      name_public:
        type: boolean
        example: false
      birth:
        type: string
      gender:
        type: string
        enum:
          - Male
          - Female
          - Other
      nickname:
        type: string
      email:
        type: string
      phone_number:
        type: string
      phone_public:
        type: boolean
        example: false
      image_url:
        type: string
      introduction:
        type: string

  Lesson:
    type: object
    required:
      - lesson id
      - tutor id
      - gender
      - age
    properties:
      lesson id:
        description: 'the id of the lesson ad'
        type: number
        format: int32
      tutor id:
        description: 'the id of the tutor'
        type: number
        format: int32
      gender:
        type: string
        enum:
          - male
          - female
          - other
      age:
        description: 'age of the tutor'
        type: number
        format: int32
      editable:
        $ref: '#/definitions/LessonEditable'
    example:
      summary: 'an example of a lesson'
      description: ''
      lesson id: 14
      tutor id: 3
      gender: female
      age: 33
  LessonEditable:
    type: object
    properties:
      category:
        description: 'the category of the lesson'
        type: string
      title:
        description: 'name of the lesson ad'
        type: string
      price:
        description: 'price per one lesson, based on KRW'
        type: number
        format: int32
      location:
        description: available location of the tutor'
        type: string
      minute per lesson:
        type: number
        format: int32
      content:
        description: 'introduction of the lesson by the tutor'
        type: string
    example:
      category: classic piano
      title: some title
      price: 120000
      location: some location
      minute per lesson: 60
      content: some introduction
